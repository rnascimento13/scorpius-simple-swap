/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TokenSwap, TokenSwapInterface } from "../TokenSwap";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_tokenIn",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "_tokenOut",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenWallet",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "swapper",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amounIn",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    name: "Swap",
    type: "event",
  },
  {
    inputs: [],
    name: "ratioIn",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ratioOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    name: "swap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenIn",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenInSwapped",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenOut",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenOutRemaining",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenWallet",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526001600055600180553480156200001a57600080fd5b5060405162000ea938038062000ea98339810160408190526200003d91620002a3565b600280546001600160a01b038086166001600160a01b03199283168117909355600380548683169084161790556004805491851691909216178155604080516318160ddd60e01b8152905163095ea7b392309285926318160ddd92828101926020929190829003018186803b158015620000b657600080fd5b505afa158015620000cb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000f19190620002f7565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156200013857600080fd5b505af11580156200014d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000173919062000311565b50600354604080516318160ddd60e01b815290516001600160a01b039092169163095ea7b391309184916318160ddd916004808301926020929190829003018186803b158015620001c357600080fd5b505afa158015620001d8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001fe9190620002f7565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156200024557600080fd5b505af11580156200025a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000280919062000311565b505050506200033c565b6001600160a01b0381168114620002a057600080fd5b50565b600080600060608486031215620002b957600080fd5b8351620002c6816200028a565b6020850151909350620002d9816200028a565b6040850151909250620002ec816200028a565b809150509250925092565b6000602082840312156200030a57600080fd5b5051919050565b6000602082840312156200032457600080fd5b815180151581146200033557600080fd5b9392505050565b610b5d806200034c6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063bff99c6c1161005b578063bff99c6c146100f0578063d0202d3b14610103578063db5d008714610116578063f47c20ca1461011e57600080fd5b80636daf390b1461008d57806394b918de146100bd578063acb9b0b2146100de578063b14e5d67146100e7575b600080fd5b6002546100a0906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100d06100cb36600461093a565b610127565b6040519081526020016100b4565b6100d060055481565b6100d060015481565b6004546100a0906001600160a01b031681565b6003546100a0906001600160a01b031681565b6100d0610799565b6100d060005481565b60008082116101765760405162461bcd60e51b8152602060048201526016602482015275616d6f756e74496e2063616e2774206265207a65726f60501b60448201526064015b60405180910390fd5b6002546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b1580156101b957600080fd5b505afa1580156101cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f19190610953565b10156102345760405162461bcd60e51b81526020600482015260126024820152716e6f20746f6b656e496e2062616c616e636560701b604482015260640161016d565b60008054610244846001546108b5565b61024e9190610982565b90506000600260009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156102a057600080fd5b505afa1580156102b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d891906109a4565b60ff1690506000600360009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561032d57600080fd5b505afa158015610341573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036591906109a4565b60ff16905060008183116103975761037d83836109c7565b61038890600a610ac2565b6103929085610ace565b6103b6565b6103a182846109c7565b6103ac90600a610ac2565b6103b69085610982565b9050600081116104085760405162461bcd60e51b815260206004820152601960248201527f6d7573742062652067726561746572207468656e207a65726f00000000000000604482015260640161016d565b600354600480546040516370a0823160e01b81526001600160a01b0391821692810192909252839216906370a082319060240160206040518083038186803b15801561045357600080fd5b505afa158015610467573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048b9190610953565b116104ca5760405162461bcd60e51b815260206004820152600f60248201526e1bdd5d081bd9881d1bdad95b93dd5d608a1b604482015260640161016d565b600254604051636eb1769f60e11b815233600482015230602482015287916001600160a01b03169063dd62ed3e9060440160206040518083038186803b15801561051357600080fd5b505afa158015610527573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054b9190610953565b10156105995760405162461bcd60e51b815260206004820152601860248201527f455243323020616c6c6f77616e636520746f6f206c6f77210000000000000000604482015260640161016d565b600254600480546040516323b872dd60e01b815233928101929092526001600160a01b03908116602483015260448201899052909116906323b872dd90606401602060405180830381600087803b1580156105f357600080fd5b505af1158015610607573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062b9190610aed565b5060035460405163095ea7b360e01b8152336004820152602481018390526001600160a01b039091169063095ea7b390604401602060405180830381600087803b15801561067857600080fd5b505af115801561068c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b09190610aed565b50600354600480546040516323b872dd60e01b81526001600160a01b039182169281019290925233602483015260448201849052909116906323b872dd90606401602060405180830381600087803b15801561070b57600080fd5b505af115801561071f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107439190610aed565b50856005546107529190610b0f565b600555604080518781526020810183905233917f77f92a1b6a1a11de8ca49515ad4c1fad45632dd3442167d74b90b304a3c7a758910160405180910390a295945050505050565b600354600480546040516370a0823160e01b81526001600160a01b03918216928101929092526000926108b0929116906370a082319060240160206040518083038186803b1580156107ea57600080fd5b505afa1580156107fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108229190610953565b60035460048054604051636eb1769f60e11b81526001600160a01b03918216928101929092523060248301529091169063dd62ed3e9060440160206040518083038186803b15801561087357600080fd5b505afa158015610887573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ab9190610953565b610922565b905090565b60008115806108d9575082826108cb8183610ace565b92506108d79083610982565b145b61091c5760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015260640161016d565b92915050565b60008183106109315781610933565b825b9392505050565b60006020828403121561094c57600080fd5b5035919050565b60006020828403121561096557600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008261099f57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156109b657600080fd5b815160ff8116811461093357600080fd5b6000828210156109d9576109d961096c565b500390565b600181815b80851115610a195781600019048211156109ff576109ff61096c565b80851615610a0c57918102915b93841c93908002906109e3565b509250929050565b600082610a305750600161091c565b81610a3d5750600061091c565b8160018114610a535760028114610a5d57610a79565b600191505061091c565b60ff841115610a6e57610a6e61096c565b50506001821b61091c565b5060208310610133831016604e8410600b8410161715610a9c575081810a61091c565b610aa683836109de565b8060001904821115610aba57610aba61096c565b029392505050565b60006109338383610a21565b6000816000190483118215151615610ae857610ae861096c565b500290565b600060208284031215610aff57600080fd5b8151801515811461093357600080fd5b60008219821115610b2257610b2261096c565b50019056fea26469706673582212204dd7af36da9edc9fa28d01af433bfd228f86d6e493302d1b7c597c0e3df30d5f64736f6c63430008090033";

type TokenSwapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenSwapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenSwap__factory extends ContractFactory {
  constructor(...args: TokenSwapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _tokenIn: string,
    _tokenOut: string,
    _tokenWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TokenSwap> {
    return super.deploy(
      _tokenIn,
      _tokenOut,
      _tokenWallet,
      overrides || {}
    ) as Promise<TokenSwap>;
  }
  getDeployTransaction(
    _tokenIn: string,
    _tokenOut: string,
    _tokenWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _tokenIn,
      _tokenOut,
      _tokenWallet,
      overrides || {}
    );
  }
  attach(address: string): TokenSwap {
    return super.attach(address) as TokenSwap;
  }
  connect(signer: Signer): TokenSwap__factory {
    return super.connect(signer) as TokenSwap__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenSwapInterface {
    return new utils.Interface(_abi) as TokenSwapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenSwap {
    return new Contract(address, _abi, signerOrProvider) as TokenSwap;
  }
}

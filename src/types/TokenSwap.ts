/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface TokenSwapInterface extends ethers.utils.Interface {
  functions: {
    "ratioIn()": FunctionFragment;
    "ratioOut()": FunctionFragment;
    "swap(uint256)": FunctionFragment;
    "tokenIn()": FunctionFragment;
    "tokenInSwapped()": FunctionFragment;
    "tokenOut()": FunctionFragment;
    "tokenOutRemaining()": FunctionFragment;
    "tokenWallet()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "ratioIn", values?: undefined): string;
  encodeFunctionData(functionFragment: "ratioOut", values?: undefined): string;
  encodeFunctionData(functionFragment: "swap", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "tokenIn", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenInSwapped",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tokenOut", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenOutRemaining",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenWallet",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ratioIn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ratioOut", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenInSwapped",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenOut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenOutRemaining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenWallet",
    data: BytesLike
  ): Result;

  events: {
    "Swap(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
}

export type SwapEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { swapper: string; amounIn: BigNumber; amountOut: BigNumber }
>;

export type SwapEventFilter = TypedEventFilter<SwapEvent>;

export interface TokenSwap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenSwapInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ratioIn(overrides?: CallOverrides): Promise<[BigNumber]>;

    ratioOut(overrides?: CallOverrides): Promise<[BigNumber]>;

    swap(
      amountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenIn(overrides?: CallOverrides): Promise<[string]>;

    tokenInSwapped(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenOut(overrides?: CallOverrides): Promise<[string]>;

    tokenOutRemaining(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenWallet(overrides?: CallOverrides): Promise<[string]>;
  };

  ratioIn(overrides?: CallOverrides): Promise<BigNumber>;

  ratioOut(overrides?: CallOverrides): Promise<BigNumber>;

  swap(
    amountIn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenIn(overrides?: CallOverrides): Promise<string>;

  tokenInSwapped(overrides?: CallOverrides): Promise<BigNumber>;

  tokenOut(overrides?: CallOverrides): Promise<string>;

  tokenOutRemaining(overrides?: CallOverrides): Promise<BigNumber>;

  tokenWallet(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ratioIn(overrides?: CallOverrides): Promise<BigNumber>;

    ratioOut(overrides?: CallOverrides): Promise<BigNumber>;

    swap(amountIn: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    tokenIn(overrides?: CallOverrides): Promise<string>;

    tokenInSwapped(overrides?: CallOverrides): Promise<BigNumber>;

    tokenOut(overrides?: CallOverrides): Promise<string>;

    tokenOutRemaining(overrides?: CallOverrides): Promise<BigNumber>;

    tokenWallet(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Swap(address,uint256,uint256)"(
      swapper?: string | null,
      amounIn?: null,
      amountOut?: null
    ): SwapEventFilter;
    Swap(
      swapper?: string | null,
      amounIn?: null,
      amountOut?: null
    ): SwapEventFilter;
  };

  estimateGas: {
    ratioIn(overrides?: CallOverrides): Promise<BigNumber>;

    ratioOut(overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      amountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenIn(overrides?: CallOverrides): Promise<BigNumber>;

    tokenInSwapped(overrides?: CallOverrides): Promise<BigNumber>;

    tokenOut(overrides?: CallOverrides): Promise<BigNumber>;

    tokenOutRemaining(overrides?: CallOverrides): Promise<BigNumber>;

    tokenWallet(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ratioIn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ratioOut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swap(
      amountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenIn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenInSwapped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenOut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenOutRemaining(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
